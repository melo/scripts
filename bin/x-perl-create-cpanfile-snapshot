#!/usr/bin/perl

use strict;
use warnings;
use Cwd;
use Getopt::Long;

sub usage {
  print "Error: $@\n" if $@;

  print <<EOU;
Usage: x-perl-create-cpanfile-snapshot <options> [<deps>...]

Use the current folder cpanfile to generate a fresh cpanfile.snapshot.

Uses a volume to cache the installed modules, the follow-up runs will be much faster.

If you need extra packages to install, just pass them along like this:

    x-perl-create-cpanfile-snapshot libidn-dev file-dev


Options:

  --dryrun   Do everything except run Docker
  --verbose  Show what is going on
  --volume   Define the name of the persistent volume to use.
             If none is used, we will construct a new name based
             on the current work directory
  --reset    Remove volume before starting, forces full rebuild
  --shell    After the install is configured, start a shell

  --all      Install all deps, including non-prod

  --official       Use official Perl image
  --alpine         Use Alpine Perl image
  --target=label   Use local Dockerfile with a specific target label
EOU
  exit(1);
}

GetOptions(
  \my %cfg, 'help|?',  'volume',   'reset',  'shell',  'all',
  'next',   'verbose', 'official', 'alpine', 'dryrun', 'target=s'
) or usage();
usage() if $cfg{help};

$cfg{verbose} = 1 if $cfg{dryrun};

my $target = $cfg{target} || _fetch_target_label();
l("target for image to use as dep: $target");

my $single = 0;
$single++ if $cfg{official};
$single++ if $cfg{alpine};
$single++ if $target;

usage("Cannot use --official, --alpine, and --target=<target> together") if $single > 1;
my $vrs = "perl";
$vrs = "alpine" if $cfg{alpine};

## use the project dir as volume name as a fallback
my $cwd = getcwd();

my $vol = $cfg{volume};
unless ($vol) {
  $vol = $cwd;
  $vol =~ s/^$ENV{HOME}//;
  $vol =~ s{^/}{}g;
  $vol =~ s{/}{-}g;
  $vol .= "-cpan-deps-for-$vrs";
}
l("use '$vol' as volume name");

if ($cfg{reset}) {
  l("remove volume '$vol', forcing full rebuild");
  system('docker', 'volume', 'rm', $vol) and die "Error: failed to remove volume '$vol', exit code $!";
}

my $label = 'latest-build';
$label = 'next-build' if $cfg{next};
$label = "$vrs-$label";

my $shell = $cfg{shell} || '';
my $deps  = join(' ', @ARGV);
l("install deps: $deps");

my $all = $cfg{all} ? ' --all ' : '';

$deps .= _fetch_deps_from_cpanfile($vrs);

my $script = "
    set -xe
    if [ -n '$deps' ] ; then
      if [ '$vrs' = 'perl' ] ; then
        apt update
        apt install -y $deps
      else
        apk --no-cache add $deps
      fi
    fi
    rm -rf /deps/local
    ln -s /cache-deps /deps/local
    cd /src
    pdi-build-deps --skip-snapshot --verbose $all
    cp /deps/cpanfile.snapshot /src
    if [ -n \"$shell\" ] ; then
      exec /bin/sh
    fi
";
l("Prepare script to run: $script");

my $docker_tag = "melopt/perl-alt:$label";
l(".... initial tag $docker_tag (target is $target)");
if ($target) {
  $docker_tag = lc($vol);
  l(".... found target $target, new docker tag is $docker_tag");
  system('docker', 'build', '--tag', $docker_tag, '--target', $target, '.');
}
l(".... final tag $docker_tag");
exec('docker', 'run', '-it', '--rm', '-v', "$vol:/cache-deps", '-v', "$cwd:/src", $docker_tag, '/bin/sh', '-c', $script)
  unless $cfg{dryrun};

sub l {
  return unless $cfg{verbose};
  print "* @_\n";
}

sub _fetch_deps_from_cpanfile {
  my ($vrs) = @_;
  my $fn = 'cpanfile.cfg';
  $fn = 'cpanfile' unless -r $fn;

  l("Scan '$fn' for $vrs deps");
  open(my $fh, $fn) or return '';

  my @deps;
  while (<$fh>) {
    push @deps, $1 if m/^#+\s+requires_package_$vrs\s+(.+)$/i;
    push @deps, $1 if m/^#+\s+requires_package\s+(.+)$/i;
  }

  return '' unless @deps;
  l('Found dependencies: ', @deps);
  return join(' ', @deps);
}

sub _fetch_target_label {
  my $fn = 'cpanfile.cfg';
  $fn = 'cpanfile' unless -r $fn;

  l("Scan '$fn' for Dockerfile target label");
  open(my $fh, $fn) or return '';

  my $target;
  while (<$fh>) {
    $target = $1 if m/^\s*#*\s*target_label\s+(.+)$/i;
  }

  return '' unless $target;
  l("Found target lavel: $target");
  return $target;
}
